const { parseSync, stringify } = require('svgson')
const path = require("path");
const fs = require("fs");

const {materialIconsToImport, customIcons } = require("../../lib/components/primitive/icon/icon-master-list");
const materialUiPackageRoot = path.resolve(__dirname, "../../node_modules/@material-design-icons/svg/");
const destFile = path.resolve(__dirname, "../../lib/components/primitive/icon/icons.tsx");

function getIconObjects() {
  let iconObjectsString = '';
  materialIconsToImport.forEach(icon => {
    const orig = `${materialUiPackageRoot}/${icon.style}/${icon.name}.svg`;

    try {
      const data = fs.readFileSync(orig, 'utf8');
      const parsed = parseSync(data)
      const children = parsed.children.map(child => {
        child.attributes.fill = "DYNAMICCOLOR";
        return child;
      })
      const pathString = stringify(children).replaceAll('"DYNAMICCOLOR"', "{color}");

      const obj = `
  [IconShape.${icon.name.toUpperCase()}] : {
    baseWidth: 24,
    baseHeight: 24,
    render: (color) => (
      <React.Fragment>
        ${pathString}
      </React.Fragment>
    )
  },`;
      iconObjectsString += obj
    } catch(err) {
      console.log(err);
    }
  });
  iconObjectsString +=`
`;
  customIcons.forEach(icon => {
    iconObjectsString += icon.data
  })

  return iconObjectsString;
}

function generateIconsTsx() {
  const iconObjectsString = getIconObjects();
  let str =
`/*
 * DO NOT EDIT THIS FILE DIRECTLY
 * This file is generated from the generate-iconset command.
 * See icon-master-list.js for instructions
 */

import React from "react";
import { IconProvider } from "./icon";
import { IconShape } from "./icon-shape";

/**
 * The Icon Provider that contains all of the available Icons this application
 * utilizes.
 */
export const Icons: IconProvider = {${iconObjectsString}};
`;

  try {
    fs.writeFileSync(destFile, str);
  } catch (err) {
    console.error(err);
  }
}

function generateIconShapeTsx() {
  const destFile = path.resolve(__dirname, "../../lib/components/primitive/icon/icon-shape.tsx");
let str =
`/*
 * DO NOT EDIT THIS FILE DIRECTLY
 * This file is generated from the generate-iconset command.
 * See icon-master-list.js for instructions
 */

let i = 0;

/**
 * Easy selection for the icons for the environment
 **/
export const IconShape = {
`;
  materialIconsToImport.forEach(icon => {
    str += `  ${icon.name.toUpperCase()}: i++,
`;
  });
  customIcons.forEach(icon => {
    str += `  ${icon.name.toUpperCase()}: i++,
`;
  });
    
str += `} as const;

export type IconShapeType = typeof IconShape[keyof typeof IconShape];
`;

  try {
    fs.writeFileSync(destFile, str);
  } catch (err) {
    console.error(err);
  }
}

/**
 * This script regenerates the icon lists for the Icon component
 */
async function run() {
  generateIconsTsx();
  generateIconShapeTsx();
  console.log('\x1b[32m%d%s\x1b[0m', materialIconsToImport.length,' icons successfully generated.');
  console.log('\x1b[32m%d%s\x1b[0m', customIcons.length,' custom icons included.');
}

module.exports = run;
